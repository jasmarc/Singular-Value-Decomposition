/*
 * Copyright (c) 2004-2008 by James M. Lawrence
 *
 * See LICENSE
 *
 */

#include "CLASSLOWER.h"

FORTRANTYPE CLASSLOWER_FORTRANTYPE_1 = 1.0 ;
FORTRANTYPE CLASSLOWER_FORTRANTYPE_neg_1 = -1.0 ;
FORTRANTYPE CLASSLOWER_FORTRANTYPE_0 = 0.0 ;

static integer integer_1 = 1 ;

FORTRANTYPE CLASSUPPER_dot(CLASSUPPER* a, CLASSUPPER* b)
{
    return xdot_(&a->vsize,
                 a->data,
                 &integer_1,
                 b->data,
                 &integer_1) ;
}


CLASSUPPER* CLASSUPPER_rand(CLASSUPPER* a)
{
    integer i ;
    integer size = a->vsize*a->hsize ;

    for( i = 0 ; i != size ; ++i )
    {
        a->data[i] =
            2.0*(((double)rand())/(RAND_MAX)) - CLASSLOWER_FORTRANTYPE_1 ;
    }

    return a ;
}


/*
 * call-seq: within(epsilon, other)
 *
 * Test if each matrix element is within +epsilon+ of the respective
 * matrix element of +other+.
 *
 */
VALUE rb_CLASSLOWER_within( VALUE self, VALUE repsilon, VALUE other )
{
    CLASSUPPER* a ;
    CLASSUPPER* b ;
    FORTRANTYPE* pa ;
    FORTRANTYPE* pb ;
    FORTRANTYPE* aend ;
    double epsilon ;
    get_CLASSLOWER(a, self) ;
    get_CLASSLOWER(b, other) ;

    if( a->vsize != b->vsize ||
        a->hsize != b->hsize )
    {
        raise_dim_error() ;
    }

    epsilon = NUM2DBL(repsilon) ;
    
    pa = a->data ;
    pb = b->data ;
    aend = pa + a->vsize*a->hsize ;
    
    for( ; pa != aend ; ++pa, ++pb )
    {
        if( fabs((*pa) - (*pb)) > epsilon )
        {
            return Qfalse ;
        }
    }

    return Qtrue ;
}


VALUE rb_CLASSLOWER_symmetric_private( VALUE self, VALUE repsilon )
{
    CLASSUPPER* a ;
    double epsilon ;
    
    get_CLASSLOWER(a, self) ;
    
    if( a->vsize != a->hsize )
    {
        return Qfalse ;
    }

    epsilon = NUM2DBL(repsilon) ;

    {
        int i ;
        int j ;

        for( j = 0 ; j < a->hsize ; ++j )
        {
            for( i = j + 1 ; i < a->vsize ; ++i )
            {
                if( fabs(a->data[i + j*a->vsize] -
                         a->data[j + i*a->vsize]) > epsilon )
                {
                    return Qfalse ;
                }
            }
        }
    }

    return Qtrue ;
}

VALUE rb_CLASSLOWER_div(VALUE self, VALUE rb)
{
    CLASSUPPER* a ;
    CLASSUPPER* c ;
    VALUE rc ;
    double b = NUM2DBL(rb) ;
    
    get_CLASSLOWER(a, self) ;
    c = CLASSUPPER_clone(a) ;
    rc = wrap_CLASSLOWER(c) ;
    CLASSUPPER_mul_scalar(c, 1.0/b) ;
    return rc ;
}

